["src/nvim/spellfile.c", ["  uint16_t wn_flags;            // WF_ flags", "  short wn_region;              // region mask", ""], "runtime/int"]
["src/nvim/spellfile.c", ["  char buf[VIMSPELLMAGICL];", "  SPELL_READ_BYTES(buf, VIMSPELLMAGICL, fd,; );", "  if (memcmp(buf, VIMSPELLMAGIC, VIMSPELLMAGICL) != 0) {"], "whitespace/parens"]
["src/nvim/spellfile.c", ["  }", "  SPELL_READ_NONNUL_BYTES((char *)lp->sl_regions, (size_t)len, fd,; );", "  lp->sl_regions[len] = NUL;"], "whitespace/parens"]
["src/nvim/spellfile.c", ["      buf[0] = '^';  // always match at one position only", "      SPELL_READ_NONNUL_BYTES(buf + 1, (size_t)n, fd,; );", "      buf[n + 1] = NUL;"], "whitespace/parens"]
["src/nvim/spellfile.c", ["  // <rep> : <repfromlen> <repfrom> <reptolen> <repto>", "  for (; gap->ga_len < cnt; ++gap->ga_len) {", "    int c;"], "readability/increment"]
["src/nvim/spellfile.c", ["            if (*items[0] == 'P') {", "              sprintf((char *)buf, \"^%s\", items[4]);", "            } else {"], "runtime/printf"]
["src/nvim/spellfile.c", ["            } else {", "              sprintf((char *)buf, \"%s$\", items[4]);", "            }"], "runtime/printf"]
["src/nvim/spellfile.c", ["                    if (aff_entry->ae_cond != NULL) {", "                      sprintf((char *)buf, \"^%s\",", "                              aff_entry->ae_cond);"], "runtime/printf"]
["src/nvim/spellfile.c", ["      // Accept \"SAL from to\" and \"SAL from to  #comment\".", "      else if (is_aff_rule(items, itemcnt, \"SAL\", 3)) {", "        if (do_sal) {"], "whitespace/newline"]
["src/nvim/spellfile.c", ["    if (!ascii_isdigit(**pp)) {", "      ++*pp;            // always advance, avoid getting stuck", "      return 0;"], "readability/increment"]
["src/nvim/spellfile.c", ["                                 use_condit & (xht == NULL", "                                    ? ~0 :  ~CONDIT_SUF),", "                                 use_flags, use_pfxlist, pfxlen) == FAIL) {"], "whitespace/alignment"]
["src/nvim/spellfile.c", ["                                 use_condit & (xht == NULL", "                                    ? ~0 :  ~CONDIT_SUF),", "                                 use_flags, use_pfxlist, pfxlen) == FAIL) {"], "whitespace/alignment"]
["src/nvim/spellfile.c", ["#ifndef SPELL_PRINTTREE", "    if (spin->si_verbose || p_verbose > 2)", "#endif"], "readability/braces"]
